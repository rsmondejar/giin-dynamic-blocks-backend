// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Define your own models here
model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  email         String          @unique
  name          String
  lastName      String?         @map("last_name")
  password      String
  isAdmin       Boolean         @default(false) @map("is_admin")
  isActive      Boolean         @default(true) @map("is_active")
  emailVerified DateTime?       @map("email_verified")
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")
  deletedAt     DateTime?       @map("deleted_at")
  formsRoles    FormUserRoles[]
  authorForms   Form[]

  @@map("users")
}

model Role {
  id         String          @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  type       String          @unique
  createdAt  DateTime        @default(now()) @map("created_at")
  updatedAt  DateTime        @updatedAt @map("updated_at")
  deletedAt  DateTime?       @map("deleted_at")
  formsRoles FormUserRoles[]

  @@map("roles")
}

model FormUserRoles {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @map("user_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  formId String @map("form_id") @db.ObjectId
  form   Form   @relation(fields: [formId], references: [id])
  roleId String @map("role_id") @db.ObjectId
  role   Role   @relation(fields: [roleId], references: [id])

  @@map("form_user_roles")
}

model Form {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  slug           String           @unique
  description    String?
  author         User             @relation(fields: [authorId], references: [id])
  authorId       String           @map("author_id") @db.ObjectId
  isPublished    Boolean          @default(true) @map("is_published")
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  deletedAt      DateTime?        @map("deleted_at") @db.Timestamp()
  questions      Question[]
  formSubmission FormSubmission[]
  formsRoles     FormUserRoles[]

  @@map("forms")
}

model InputType {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String    @unique
  type      String    @unique
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("input_types")
}

model FormSubmission {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  formId    String           @db.ObjectId
  form      Form             @relation(fields: [formId], references: [id])
  answers   QuestionAnswer[]
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime         @updatedAt @map("updated_at")
  deletedAt DateTime?        @map("deleted_at")

  @@map("form_submissions")
}

type Question {
  id          String           @db.ObjectId
  title       String
  placeholder String?
  isRequired  Boolean          @default(false) @map("is_required")
  type        String
  order       Int?             @default(0)
  options     QuestionOption[]
}

type QuestionOption {
  key   String @db.ObjectId
  value String
  order Int?   @default(0)
}

type QuestionAnswer {
  id         String @db.ObjectId
  questionId String
  value      String
}
