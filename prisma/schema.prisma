// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Define your own models here
model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  email         String          @unique
  name          String
  lastName      String?
  password      String
  // isAdmin   Boolean   @default(false) // TODO: check if is necessary
  isActive      Boolean         @default(true)
  emailVerified DateTime?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  deletedAt     DateTime?
  // role      Role      @relation(fields: [roleId], references: [id])
  // roleId    String    @db.ObjectId
  formsRoles    FormUserRoles[]
  authorForms   Form[]
}

model Role {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  // users     User[]
}

model FormUserRoles {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  formId String @db.ObjectId
  form   Form   @relation(fields: [formId], references: [id])
}

model Form {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  slug           String           @unique
  description    String?
  author         User             @relation(fields: [authorId], references: [id])
  authorId       String           @db.ObjectId
  isPublished    Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  deletedAt      DateTime?
  fieldValues    FieldValue[]
  formSubmission FormSubmission[]
  formsRoles     FormUserRoles[]
}

model Field {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String       @unique
  type        String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?
  fieldValues FieldValue[]
}

model FieldValue {
  id           String             @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  placeholder  String?
  isRequired   Boolean            @default(false)
  options      FieldValueOption[]
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  deletedAt    DateTime?
  field        Field              @relation(fields: [fieldId], references: [id])
  fieldId      String             @db.ObjectId
  form         Form               @relation(fields: [formId], references: [id])
  formId       String             @db.ObjectId
  submission   FormSubmission?    @relation(fields: [submissionId], references: [id])
  submissionId String?            @db.ObjectId
}

model FieldValueOption {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  key       String
  value     String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?
  field     FieldValue @relation(fields: [fieldId], references: [id])
  fieldId   String     @db.ObjectId
}

model FormSubmission {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  form      Form         @relation(fields: [formId], references: [id])
  formId    String       @db.ObjectId
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  deletedAt DateTime?
  values    FieldValue[]
}
